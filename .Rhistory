q25 = qnorm(0.25, mean = IFS_T_mea, sd = IFS_T_std),
q75 = qnorm(0.75, mean = IFS_T_mea, sd = IFS_T_std),
q95 = qnorm(0.95, mean = IFS_T_mea, sd = IFS_T_std)
) %>%
dplyr::rename(DMO = IFS_T_mea)
emos_meteogram_data <- all_emos %>%
dplyr::filter(reftime == fecha) %>%
dplyr::select(IFS_T_mea_p, IFS_T_std_p, reftime, time) %>%
dplyr::mutate(
q05 = qnorm(0.05, mean = IFS_T_mea_p, sd = IFS_T_std_p),
q25 = qnorm(0.25, mean = IFS_T_mea_p, sd = IFS_T_std_p),
q75 = qnorm(0.75, mean = IFS_T_mea_p, sd = IFS_T_std_p),
q95 = qnorm(0.95, mean = IFS_T_mea_p, sd = IFS_T_std_p)
) %>%
dplyr::rename(EMOS = IFS_T_mea_p)
mean_dmo_data <- dmo_meteogram_data %>%
dplyr::select(DMO, time) %>%
tidyr::gather("variable", "value", -time, na.rm = T)
mean_emos_data <- emos_meteogram_data %>%
dplyr::select(EMOS, time) %>%
tidyr::gather("variable", "value", -time, na.rm = T)
forecast_data <-
dplyr::bind_rows(mean_dmo_data, mean_emos_data)
forecast_data$Q5 <- c(dmo_meteogram_data$q05, emos_meteogram_data$q05)
forecast_data$Q25 <- c(dmo_meteogram_data$q25, emos_meteogram_data$q25)
forecast_data$Q75 <- c(dmo_meteogram_data$q75, emos_meteogram_data$q75)
forecast_data$Q95 <- c(dmo_meteogram_data$q95, emos_meteogram_data$q95)
xlimits <- c(min(forecast_data$time),
max(forecast_data$time))
observations_data <- all_emos %>%
dplyr::select(OBS, time) %>%
tidyr::gather("variable", "value", -time, na.rm = T) %>%
dplyr::as_tibble()
color_scale_fill <- setNames(c("skyblue", "red", "black"),
c("DMO", "EMOS", "OBS"))
color_scale_line <- setNames(c("skyblue", "darkred", "black"),
c("DMO", "EMOS", "OBS"))
legend_labels <-
c("DMO", "EMOS", "OBS")
forecast_data %>%
ggplot(aes(x = time)) +
scale_color_manual(name = '',
labels = legend_labels,
values = color_scale_line) +
scale_fill_manual(name = '', values = color_scale_fill) +
geom_ribbon(aes(
ymin = Q5,
ymax = Q95,
fill = variable
), alpha = 0.2) +
geom_ribbon(aes(
ymin = Q25,
ymax = Q75,
fill = variable
), alpha = 0.5) +
geom_line(aes(y = value, color = variable)) +
geom_line(data = observations_data, aes(y = value, color = variable)) +
labs(y = "°C", x = "") +
scale_x_datetime(
limits = xlimits,
expand = c(0, 0),
date_breaks = "1 days",
date_labels = "%b %d"
) +
theme_light() + guides(fill = "none") +
theme(
plot.title = element_text(hjust = 0.5, size = 18),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.box.background = element_rect(fill = 'transparent')
) +
scale_alpha(guide = 'none')
wrf <- readRDS(paste0(base_dir, "WRF_bothregions.RDS")) %>%
dplyr::filter(ID == ejemplo) %>%
dplyr::select(c(time, reftime, lead, WRF_T, ID))
all_wrf <- dplyr::left_join(all, wrf, by = c("reftime", "time", "lead", "ID"))
prediction <- tibble();
for (l in unique_leads){
train <- all_wrf %>% filter(reftime < as.POSIXct(train_date, tz = 'UTC') & lead == l)
val <- all_wrf %>% filter(reftime >= as.POSIXct(train_date, tz = 'UTC') & lead == l)
if (l <= 72) { #
emos_formula   <- as.character("OBS ~ IFS_T_mea + WRF_T | IFS_T_std ")
} else {
emos_formula   <- as.character("OBS ~ IFS_T_mea | IFS_T_std ")
}
emosfit <- crch(formula = emos_formula,
dat     = train,
dist    = "gaussian",
type    = "crps")
predres <- predict(object = emosfit,
newdata  = val,
type = "parameter")
prediction <- predres %>%
bind_cols(lead=val$lead,reftime=val$reftime,time=val$time) %>%
rename(T_mea_p = location, T_std_p = scale) %>%
bind_rows(prediction)
}
all_emos_multi <- all_emos %>%
filter(reftime >= as.POSIXct(train_date, tz = 'UTC')) %>%
right_join(prediction) %>%
arrange(reftime,lead)
all_emos_multi %>%
dplyr::mutate(
CRPS = SpecsVerification::GaussCrps(IFS_T_mea, IFS_T_std, OBS),
CRPS_p = SpecsVerification::GaussCrps(IFS_T_mea_p, IFS_T_std_p, OBS),
CRPS_pm = SpecsVerification::GaussCrps(T_mea_p, T_std_p, OBS),
) %>%
dplyr::group_by(lead) %>%
dplyr::summarize(DMO = mean(CRPS,na.rm=T), EMOS_IFS = mean(CRPS_p,na.rm=T), EMOS_MULTI = mean(CRPS_pm,na.rm=T)) %>%
tidyr::gather(variable, value, -lead) %>%
ggplot(aes(x=lead, y=value, colour=variable)) +
ggtitle("EMOS postprocesamiento multimodelo") +
scale_color_manual(name = '',values = c("red","skyblue", "darkblue")) +
theme_bw() +
labs(y = "CRPS", x= "lead time [h]", colour= "Forecast") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_line()
gemos_formula <- as.character("OBS ~ IFS_T_mea + ELEV + TPI5 + TPI20 + TPI100 | IFS_T_std")
gemos_predictors <- readRDS(paste0(base_dir, "preproc_train.RDS")) %>%
as_tibble()
gemos <- ifs %>%
dplyr::left_join(obs, by = c("time", "ID")) %>%
dplyr::select(c(IFS_T_std, IFS_T_mea, time, reftime, lead, ID, OBS)) %>%
dplyr::left_join(gemos_predictors) %>%
dplyr::filter(ID %in% gemos_predictors$ID) %>%
arrange(ID, reftime,lead)
prediction <- tibble();
for (l in unique_leads) {
print(paste0("Training gEMOS IFS data for all stations and lead time ", l))
train <- gemos %>%
filter(reftime < as.POSIXct(train_date, tz = 'UTC') & lead == l)
gemosfit <- crch(
formula = stats::as.formula(gemos_formula),
dat     = train,
dist    = "gaussian",
type    = "crps"
)
val <- gemos %>%
filter(reftime > as.POSIXct(train_date, tz = 'UTC') & lead == l)
predres <- predict(object = gemosfit,
newdata  = val,
type = "parameter")
prediction <- predres %>%
bind_cols(lead=val$lead, reftime=val$reftime, time=val$time, ID = val$ID) %>%
rename(IFS_T_mea_p = location, IFS_T_std_p = scale) %>%
bind_rows(prediction)
}
all_gemos <- gemos %>%
dplyr::filter(reftime >= as.POSIXct(train_date, tz = 'UTC')) %>%
right_join(prediction) %>%
dplyr::select(IFS_T_mea, IFS_T_std, IFS_T_mea_p, IFS_T_std_p, reftime, lead, ID, OBS) %>%
arrange(ID, reftime,lead)
all_gemos %>%
dplyr::mutate(
CRPS = SpecsVerification::GaussCrps(IFS_T_mea, IFS_T_std, OBS),
CRPS_p = SpecsVerification::GaussCrps(IFS_T_mea_p, IFS_T_std_p, OBS),
) %>%
dplyr::group_by(lead) %>%
dplyr::summarize(DMO = mean(CRPS,na.rm=T), gEMOS = mean(CRPS_p,na.rm=T)) %>%
tidyr::gather(variable, value, -lead) %>%
ggplot(aes(x=lead, y=value, colour=variable)) +
ggtitle("EMOS postprocesamiento global") +
scale_color_manual(name = '',values = c("red","skyblue", "darkblue")) +
theme_bw() +
labs(y = "CRPS", x= "lead time [h]", colour= "Forecast") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_line()
# Disponible para la region Cuyo:
# 87418 87436 87311 87416 87506 87509 87420
ejemplo2 <- 87047
#87418
obs_station <- obs %>%
dplyr::filter(ID == ejemplo)
ifs_station <- ifs %>%
dplyr::filter(ID == ejemplo)%>%
dplyr::select(-c(Lat, Lon))
all <- dplyr::right_join(ifs_station, obs_station, by = c("time", "ID"))
prediction <- tibble();
for (l in unique_leads) {
print(paste0("Training EMOS and gEMOS IFS data lead time ", l))
train_gemos <- gemos %>%
dplyr::filter(reftime < as.POSIXct(train_date, tz = 'UTC') & lead == l)
train_emos <- gemos %>%
dplyr::filter(reftime < as.POSIXct(train_date, tz = 'UTC') & lead == l & ID == ejemplo2)
val <- gemos %>%
dplyr::filter(reftime > as.POSIXct(train_date, tz = 'UTC') & lead == l & ID == ejemplo2)
emosfit <- crch(
formula = stats::as.formula(emos_formula),
dat     = train_emos,
dist    = "gaussian",
type    = "crps"
)
predres_emos <- predict(object = emosfit,
newdata  = val,
type = "parameter")
gemosfit <- crch(
formula = stats::as.formula(gemos_formula),
dat     = train_gemos,
dist    = "gaussian",
type    = "crps"
)
predres_gemos <- predict(object = gemosfit,
newdata  = val,
type = "parameter")
prediction <- predres_emos %>%
dplyr::rename(IFS_T_mea_emos = location, IFS_T_std_emos = scale) %>%
bind_cols(IFS_T_mea=val$IFS_T_mea,
IFS_T_std=val$IFS_T_std,
lead=val$lead,
reftime=val$reftime,
time=val$time,
OBS=val$OBS
) %>%
bind_cols(predres_gemos) %>%
dplyr::rename(IFS_T_mea_gemos = location, IFS_T_std_gemos = scale) %>%
bind_rows(prediction)
}
emos_formula   <- as.character("OBS ~ IFS_T_mea  | IFS_T_std ")
train_date <- "2023-06-30" #elegir período de training
prediction <- tibble();
unique_leads <- unique(all$lead) %>%
na.omit()
for (l in unique_leads){
print(paste0("Training EMOS IFS data for lead time ", l))
train <- all %>% filter(reftime < as.POSIXct(train_date, tz = 'UTC') & lead == l)
val <- all %>% filter(reftime >= as.POSIXct(train_date, tz = 'UTC') & lead == l)
emosfit <- crch(formula = emos_formula,
dat     = train,
dist    = "gaussian",
type    = "crps")
predres <- predict(object = emosfit,
newdata  = val,
type = "parameter")
prediction <- predres %>%
bind_cols(lead=val$lead,reftime=val$reftime,time=val$time) %>%
rename(IFS_T_mea_p = location, IFS_T_std_p = scale) %>%
bind_rows(prediction)
}
all_emos <- all %>%
filter(reftime >= as.POSIXct(train_date, tz = 'UTC')) %>%
right_join(prediction) %>% arrange(reftime,lead)
print(all_emos)
# Este gráfico muestra la comparación de los CRPS del modelo IFS (salida directa del modelo DMO) y espués de haber aplicado el método EMOS.
all_emos %>%
dplyr::mutate(
CRPS = SpecsVerification::GaussCrps(IFS_T_mea, IFS_T_std, OBS),
CRPS_p = SpecsVerification::GaussCrps(IFS_T_mea_p, IFS_T_std_p, OBS),
) %>%
dplyr::group_by(lead) %>%
dplyr::summarize(DMO = mean(CRPS,na.rm=T), EMOS = mean(CRPS_p,na.rm=T)) %>%
tidyr::gather(variable, value, -lead) %>%
ggplot(aes(x=lead, y=value, colour=variable)) + ggtitle("EMOS postprocesamiento") +
scale_color_manual(name = '',values = c("red","skyblue")) +
theme_bw() + labs(y = "CRPS", x= "lead time [h]", colour= "Forecast") +
theme(plot.title = element_text(hjust = 0.5)) + geom_line()
all_emos
sale <- ggplot(aes(x=lead, y=value, colour=variable)) + ggtitle("EMOS postprocesamiento") +
scale_color_manual(name = '',values = c("red","skyblue")) +
theme_bw() + labs(y = "CRPS", x= "lead time [h]", colour= "Forecast") +
theme(plot.title = element_text(hjust = 0.5)) + geom_line()
sale <- ggplot(data = all_emos, aes(x=lead, y=value, colour=variable)) + ggtitle("EMOS postprocesamiento") +
scale_color_manual(name = '',values = c("red","skyblue")) +
theme_bw() + labs(y = "CRPS", x= "lead time [h]", colour= "Forecast") +
theme(plot.title = element_text(hjust = 0.5)) + geom_line()
print(sale)
all_emos %>%
dplyr::mutate(
CRPS = SpecsVerification::GaussCrps(IFS_T_mea, IFS_T_std, OBS),
CRPS_p = SpecsVerification::GaussCrps(IFS_T_mea_p, IFS_T_std_p, OBS),
) %>%
dplyr::group_by(lead) %>%
dplyr::summarize(DMO = mean(CRPS,na.rm=T), EMOS = mean(CRPS_p,na.rm=T)) %>%
tidyr::gather(variable, value, -lead)
sale <- ggplot(data = all_emos, aes(x=lead, y=value, colour=variable)) + ggtitle("EMOS postprocesamiento") +
scale_color_manual(name = '',values = c("red","skyblue")) +
theme_bw() + labs(y = "CRPS", x= "lead time [h]", colour= "Forecast") +
theme(plot.title = element_text(hjust = 0.5)) + geom_line()
print(sale)
q()
library(aws.wrfsmn)
knitr::opts_chunk$set(echo = TRUE)
get.wrf.files(year = 2023, month = 1, day = 1, cycle = 12, time = "01H")
for (i in 1:5)
get.wrf.files(year = 2023, month = 1, day = 1, cycle = 12, time = "01H")
}
for (i in 1:5)
{get.wrf.files(year = 2023, month = 1, day = 1, cycle = 12, time = "01H")}
for (i in 1:5)
{get.wrf.files(year = 2023, month = 1, day = i, cycle = 12, time = "01H")}
filenames <- c()
for (i in 1:5)
{aux.filenames <- get.wrf.files(year = 2023, month = 1, day = i, cycle = 12, time = "01H")
filenames <- c(filenames, aux.filenames)
}
73*5
filenames
q()
install.packages("parsnip")
library("parsnip")
library("tinymodels")
install.packages("tinymodels")
install.packages("modeldata")
library("modeldata")
data(ames)
ames
tidymodels_prefer()
install.packages("tidymodels")
library("tidymodels")
tidymodels_prefer()
ames
linear_reg %>% set_engine)"lm"
linear_reg %>% set_engine("lm")
linear_reg() %>% set_engine("lm")
linear_reg() %>% set_engine("glmnet")
linear_reg()
lm_model <- linear_reg() %>%
set_engine("lm")
lm_model
lm_form_fit <- lm_model %>%
fit(Sale_Price ~ Longitude + Latitude, data = ames)
lm_form_fit
rand_forest(trees = 1000, min_n = 5) %>%
set_engine("ranger") %>%
set_mode("regression") %>%
translate()
rand_forest(trees = 1000, min_n = 5) %>%
set_engine("ranger", verbose = TRUE) %>%
set_mode("regression")
?set_engine
show_engines()
f <- rand_forest(trees = 1000, min_n = 5) %>%
set_engine("ranger", verbose = TRUE) %>%
set_mode("regression")
f
show_engines(f)
show_engines("rand_forest")
show_engines("mars")
show_engines("linear_reg")
lm_form_fit
lm_form_fit %>% extract_fit_engine()
lm_form_fit
lm_form_fit$fit
predict(lm_form_fit$fit)
predict(lm_form_fit)
predict(lm_form_fit)
parsnio::predict(lm_form_fit)
parsnip::predict(lm_form_fit)
model_res <- lm_form_fit %>%
extract_fit_engine() %>%
summary()
model_res
coef(model_res)
lm_form_fit
tidy(lm_form_fit)
predict(lm_form_fit, new_data = salida)
salida <- ames %>% slice(1:5)
salida
salida <- ames %>% slice(1:4)
salida
salida <- ames %>% slice(1:5)
predict(lm_form_fit, new_data = salida)
salida <- ames$Sale_Price %>% slice(1:5)
ames$Sale_Price[1:5]
predict(lm_form_fit, new_data = salida)
salida
salida <- ames %>% slice(1:5)
predict(lm_form_fit, new_data = salida)
parsnip_addin()
parsnip_addin()
install.packages("shiny")
library("shiny")
parsnip_addin()
library("parsnip")
parsnip_addin()
install.packages("miniUI")
library("miniUI")
install.packages("rstudioapi")
library("miniUI")
library("shiny")
library("rstudioapi")
library("parsnip")
parsnip_addin()
parsnip_addin()
q()
version
library(devtools)
install.packages("devtools")
library(usethis)
setwd("./Documentos/aws.wrfsmn/")
devtools::load_all()
devtools::check()
usethis::use_r("ith")
devtools::document()
devtools::check()
devtools::check()
aws.wrfsmn::get.wrf.files(2024, 1, 1, 12, "24H")
aws.wrfsmn::get.wrf.files(2024, 1, 1, 12, "01H")
aws.wrfsmn::get.wrf.files(2024, 1, 1, 12, "10M")
aws.wrfsmn::get.wrf.files(2024, 1, 1, 12, "01H")
s <- aws.wrfsmn::get.wrf.files(2024, 1, 1, 12, "01H")
wrf.download(s)
library(terra)
data <- rast(list(".nc"))
list.files(".nc")
list.files(pattern = ".nc")
data =rast(list.files(pattern = ".nc"))
data
raster.list = data
which(raster.list == "T2")
which(varnames(raster.list) == "T2")
which(varnames(raster.list) == "HR2")
devtools::document()
devtools::check()
?varnames
devtools::document()
devtools::check()
xpect_length(get.wrf.files(2024, 1, 1, "00", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "00", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "06", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "12", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "18", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "00", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "06", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "12", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "18", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "00", "24H"), 3)
expect_length(get.wrf.files(2024, 1, 1, "06", "24H"), 3)
expect_length(get.wrf.files(2024, 1, 1, "12", "24H"), 4)
expect_length(get.wrf.files(2024, 1, 1, "18", "24H"), 3)
test_that("Length evaluation", {
expect_length(get.wrf.files(2024, 1, 1, "00", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "06", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "12", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "18", "01H"), 73)
expect_length(get.wrf.files(2024, 1, 1, "00", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "06", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "12", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "18", "10M"), 73)
expect_length(get.wrf.files(2024, 1, 1, "00", "24H"), 3)
expect_length(get.wrf.files(2024, 1, 1, "06", "24H"), 3)
expect_length(get.wrf.files(2024, 1, 1, "12", "24H"), 4)
expect_length(get.wrf.files(2024, 1, 1, "18", "24H"), 3)
})
devtools::check()
s <- rast(list.files(pattern = )"../")
s <- rast(list.files(pattern = "../.nc"))
s <- rast(list.files(pattern = ".nc"))
s <- rast(paste0("../", list.files(pattern = ".nc")))
list.files(pattern = ".nc")
list.files(pattern = "../.nc")
list.files(path = "..", pattern = ".nc")
list.files(path = "..", pattern = ".nc", full.names = T)
data <- rast(list.files(path = "..", pattern = ".nc", full.names = T))
data
ith.output <- ith(raster.list = data)
ith.output
plot(ith.output)
T2 <- load.by.variable(data, "T2", transform = T, method = "bilinear")
T2
plot(T2)
plot(T2)
plot(data)
data <- rast(list.files(path = "..", pattern = ".nc", full.names = T))
data
T2 <- load.by.variable(list.files(path = "..", pattern = ".nc", full.names = T), "T2", transform = T, method = "bilinear")
plot(T2)
HR2 <- load.by.variable(list.files(path = "..", pattern = ".nc", full.names = T), "HR2", transform = T, method = "bilinear")
plot(HR2)
data <- c(T2, HR2)
data
ith.output <- ith(raster.list = data)
varnames(data)
names(data)
data <- rast(list.files(path = "..", pattern = ".nc", full.names = T))
varnames(data)
names(data)
?names
data <- c(T2, HR2)
data
ith.output <- ith(raster.list = data)
devtools::load_all()
ith.output <- ith(raster.list = data)
ith.output
names(ith.output)
names(ith.output) <- c("de")
length(ith.output) <-
h
length(ith.output)
size(ith.output)
ith.output
nlyr(ith.output)
matrix(data = NA, nrow = 1, ncol = nlyr(ith.output))
as.data.frame(matrix(data = NA, nrow = 1, ncol = nlyr(ith.output)))
as.data.frame(matrix(data = NA, nrow = 1, ncol = nlyr(ith.output))) <- "ER"
as.data.frame(matrix(data = "ITH", nrow = 1, ncol = nlyr(ith.output)))
pepe <- as.data.frame(matrix(data = "ITH", nrow = 1, ncol = nlyr(ith.output)))
ith.output
names(ith.output)
names(ith.output) <- pepe
ith.output
names(ith.output)
devtools::load_all()
ith.output <- ith(raster.list = data)
ith.output
plot(ith.output)
?nlyr
mean(ith.output)
plot(mean(ith.output))
q()
